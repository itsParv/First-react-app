{"version":3,"sources":["BlogCard.module.css","BlogCard.js","Utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BlogCard","props","message","console","log","className","classes","box1style","title","description","likeCount","onClick","onLikeButtonClick","App","state","showBlogs","blogArr","id","pos","updatedBlogList","updatedBlogObj","setState","onHideButtonCLick","prevState","prevProps","this","arr","blogCards","undefined","length","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,UAAY,8B,mNC4BvDC,EAvBE,SAACC,GCCM,IAACC,EDQrB,OCRqBA,EDOZD,ECNTE,QAAQC,IAAIF,GDQR,yBAAKG,UAAWC,IAAQC,WACpB,gCAAMN,EAAMO,OACZ,+BAAKP,EAAMQ,YAAX,KAEA,yCACK,0BAAMJ,UAAWC,IAAQI,WAAzB,IAAsCT,EAAMS,UAA5C,MAEL,4BAAQC,QAASV,EAAMW,mBAAvB,YEqEGC,E,4MApFbC,MAAQ,CACNC,WAAW,EAEXC,QAAS,CACP,CACEC,GAAI,EACJT,MAAO,eACPC,YAAa,2FACbC,UAAW,GAEb,CACEO,GAAI,EACJT,MAAO,eACPC,YAAa,2FACbC,UAAW,GAEb,CACEO,GAAI,EACJT,MAAO,eACPC,YAAa,2FACbC,UAAW,K,EAOjBE,kBAAoB,SAACM,GACnB,IAAMC,EAAkB,EAAKL,MAAME,QAC7BI,EAAiBD,EAAgBD,GAEvCE,EAAeV,UAAYU,EAAeV,UAAY,EACtDS,EAAgBD,GAAOE,EAEvB,EAAKC,SAAS,CAAEL,QAASG,K,EAO3BG,kBAAoB,WAIlB,EAAKD,UAAS,SAACE,EAAWC,GACxB,MAAO,CAAET,WAAYQ,EAAUR,e,uDAOzB,IAAD,OACPZ,QAAQC,IAAI,iBACZD,QAAQC,IAAIqB,KAAKX,OAEjB,IDjEyBY,ECiEnBC,ODhEMC,KADaF,ECiEMD,KAAKX,MAAME,UDhEV,MAAPU,GAAeA,EAAIG,OAAS,ECgEKJ,KAAKX,MAAME,QAAQc,KAAI,SAACC,EAAMb,GAGtF,OACE,kBAAC,EAAD,CAAUc,IAAKd,EAAKV,MAAOuB,EAAKvB,MAC9BC,YAAasB,EAAKtB,YAAaQ,GAAIc,EAAKd,GAAIP,UAAWqB,EAAKrB,UAC5DE,kBAAmB,kBAAM,EAAKA,kBAAkBM,SAND,GAcrD,OACE,yBAAKb,UAAU,OACb,4BAAQM,QAASc,KAAKH,mBAAtB,IAA2CG,KAAKX,MAAMC,UAAY,YAAc,YAAhF,MACA,6BACCU,KAAKX,MAAMC,UAAYY,EAAY,U,GA5E1BM,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMlD,c","file":"static/js/main.b1235405.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box1style\":\"BlogCard_box1style__3q1XM\",\"likeCount\":\"BlogCard_likeCount__IN1z2\"};","import React from 'react';\nimport { dumpLogs } from './Utils';\nimport classes from './BlogCard.module.css';\n// import './BlogCard.css'\n\n\nconst BlogCard = (props) => {\n\n    // onLikeBtnClick = () => {\n    //     this.setState((prevState, prevProp) => {\n    //         return {likeCount : prevState.likeCount+1}})\n    // }\n\n\n    dumpLogs(props);\n    return (\n        <div className={classes.box1style}>\n            <h3> {props.title}</h3>\n            <p> {props.description} </p>\n\n            <p>Like Count:\n                 <span className={classes.likeCount}> {props.likeCount} </span>\n            </p>\n            <button onClick={props.onLikeButtonClick}> Like </button>\n        </div>\n    )\n\n}\n\nexport default BlogCard;","export const isArrayEmpty = (arr) => {\n    if (arr !== undefined && arr != null && arr.length > 0) {\n        return false;\n    }\n    return true;\n}\n\nexport const dumpLogs = (message) => {\n    console.log(message);\n\n    //sends it to a tool for tracking\n}\n// export { isArrayEmpty, dumpLogs }","import React from 'react';\nimport './App.css';\n// import './App1.css';\nimport BlogCard from './BlogCard';\nimport { isArrayEmpty } from './Utils';\n\n\nclass App extends React.Component {\n  state = {\n    showBlogs: true,\n\n    blogArr: [\n      {\n        id: 1,\n        title: 'Blog Title 1',\n        description: 'Lorem Ipsum Dolo Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor',\n        likeCount: 0\n      },\n      {\n        id: 2,\n        title: 'Blog Title 2',\n        description: 'Lorem Ipsum Dolo Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor',\n        likeCount: 0\n      },\n      {\n        id: 3,\n        title: 'Blog Title 3',\n        description: 'Lorem Ipsum Dolo Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor Lorem Ipsum Dolor',\n        likeCount: 0\n      }\n    ]\n  }\n\n\n\n  onLikeButtonClick = (pos) => {\n    const updatedBlogList = this.state.blogArr;\n    const updatedBlogObj = updatedBlogList[pos];\n    // console.log(updatedBlogObj);\n    updatedBlogObj.likeCount = updatedBlogObj.likeCount + 1;\n    updatedBlogList[pos] = updatedBlogObj;\n\n    this.setState({ blogArr: updatedBlogList })\n  }\n\n  // const blogArr = null; \n\n\n\n  onHideButtonCLick = () => {\n    // let updatedState = !this.state.showBlogs\n    // console.log(\"Updated value\", updatedState)\n    // this.setState({ showBlogs: updatedState });\n    this.setState((prevState, prevProps) => {\n      return { showBlogs: !prevState.showBlogs }\n    });\n\n  }\n\n\n\n  render() {\n    console.log(\"render called\");\n    console.log(this.state);\n    \n    const blogCards = isArrayEmpty(this.state.blogArr) ? [] : this.state.blogArr.map((item, pos) => {\n      // console.log(item);\n  \n      return (\n        <BlogCard key={pos} title={item.title}\n          description={item.description} id={item.id} likeCount={item.likeCount}\n          onLikeButtonClick={() => this.onLikeButtonClick(pos)} />\n        // <div className=\"box1style\" key={item.id} >\n        //   <h3>{item.title} </h3>\n        //   <p> {item.description} </p>\n        // </div>\n      )\n  \n    })\n    return (\n      <div className=\"App\" >\n        <button onClick={this.onHideButtonCLick}> {this.state.showBlogs ? 'Hide Blog' : 'Show Blog'}  </button>\n        <br></br>\n        {this.state.showBlogs ? blogCards : null}\n\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}